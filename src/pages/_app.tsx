import '../../styles/globals.css'
import type {AppContext, AppProps} from 'next/app'
import {ChakraProvider} from "@chakra-ui/react";
import theme from "../../theme";
import {IntlProvider} from "react-intl";
import Head from "next/head";
import {getTitleIntl} from "@lib/utils/getTitleIntl";
import {getLocaleAppInitialProps, useLocale} from "@lib/locale";
import App from "next/app";
import React from "react";
import Layout from "@components/Layout";

function MyApp({Component, pageProps, messages}: AppProps & { messages: any }) {
  const locale = useLocale();

  return (
    <ChakraProvider theme={theme}>
      <IntlProvider locale={locale} messages={messages}>
        <Head>
          <title>{getTitleIntl('page_title', messages, "Raii's VTuber")}</title>
          <meta name='description' content='Generated by create next app'/>
          <link rel='icon' href='/favicon.ico'/>
        </Head>
        <Layout>
          <Component {...pageProps} />
        </Layout>
      </IntlProvider>
    </ChakraProvider>
  )
}

export default MyApp

// Only uncomment this method if you have blocking data requirements for
// every single page in your application. This disables the ability to
// perform automatic static optimization, causing every page in your app to
// be server-side rendered.
//
MyApp.getInitialProps = async (appContext: AppContext) => {
  // calls page's `getInitialProps` and fills `appProps.pageProps`
  const appProps = await App.getInitialProps(appContext);
  const messages = messagesPerLocale[getLocaleAppInitialProps(appContext.ctx)] || messagesPerLocale.en

  return {...appProps, messages}
}


const messagesPerLocale: { [locale: string]: any } = {
  pt: {
    'page_title': 'VTuber Raii',
    "raiis_menu": "Menu do Raii",
    "fan_arts_and_commissions": "Fanarts e comissões",
    "buy_me_a_coffe": "Me compre um café",
    "discord_server": "Servidor do Discord"
  },
  en: {
    'page_title': 'Raii VTuber',
    "discord_server": "Discord Server (portuguese)"
  }
}


